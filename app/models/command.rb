class Command < ApplicationRecord
  # `has_many :activities` doesn't work as normal here, because we're not
  # using proper single-table inheritance. (By default it will search
  # for activities where trackable_type is "Note" instead of "Command".) So
  # we need to override Command#activities with a hack.
  #
  # NOTE: doing it this way means we don't get some of the methods that
  # are automatically generated by has_many, such as `activity_ids`. Some
  # of the other methods listed at http://guides.rubyonrails.org/association_basics.html#has-many-association-reference
  # might not work as intended either. Proceed with caution.
  #
  # FIXME - ISSUE/NOTE INHERITANCE
  def activities(*params)
    Activity.where(trackable_type: "Command", trackable_id: self.id)
  end


  # -- Callbacks ------------------------------------------------------------
  before_validation do
    self.category = Category.command unless self.category
  end


  # -- Validations ----------------------------------------------------------


  # -- Scopes ---------------------------------------------------------------


  # -- Class Methods --------------------------------------------------------

  # Create a hash with all commands where the keys correspond to the field passed
  # as an argument
  def self.all_commands_by_field(field)
    # we don't memoize it because we want it to reflect recently added Commands
    commands_map = Command.all.map do |command|
      [command.fields[field], command]
    end
    Hash[commands_map]
  end


  # -- Instance Methods -----------------------------------------------------

  def <=>(other)
    self.title <=> other.title
  end
end
